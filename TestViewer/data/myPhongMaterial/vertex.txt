#version 430

in vec3 pos;
in vec3 norm;
in vec3 uvs;
in vec3 tang;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;

out vec3 phong_pos;
out vec3 phong_norm;
out vec2 textureCoordV;
out mat3 norm_matrix;

out vec3 tangent;
out vec3 binormal;

void main() {
	mat4 modelView = view * model;

	//get position based on the model of the object (w==1 for position)
	phong_pos = vec3(modelView * vec4(pos, 1.0));

	//get the normal matrix from the model matrix (or model view matrix)
	mat3 normal_matrix = mat3(transpose(inverse(modelView)));
	
	norm_matrix = normal_matrix;
	
	vec3 tg = tang;
	vec3 bn = norm * tg;
	
	phong_norm = vec3(normal_matrix * norm);
	tangent = normalize(normal_matrix * tg);
	binormal = normalize(normal_matrix * bn);
	
	//phong_pos = vec3(pos);
	//phong_norm = vec3(norm);

	textureCoordV = vec2(uvs.xy);
	gl_Position = proj * view * model * vec4(pos, 1.0);
}
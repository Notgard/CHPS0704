#version 430

uniform vec4 lightAmbiant;
uniform vec4 lightDiffuse;
uniform float lightSpecPow;
uniform vec3 cameraPosition;
uniform vec4 lightColor;
uniform vec3 lightPos;

in vec3 phong_pos;
in vec3 phong_norm;

vec4 computePhong(  vec3 light, vec4 lightcol, vec3 pos, vec3 norm, vec3 camPos, float specPower, vec4 ambiant, vec4 diffuse )
{
    vec3 normal = normalize(norm);

    //Diffuse
    vec3 lightDir = normalize(light - pos);
	
	//angle diffusion
	float diffAngle = dot(normal,lightDir);
    //float lambertian = max(diffAngle, 0.0);
	//diffuse = diffuse * lambertian;
	diffuse = diffuse * diffAngle;

    //Speculaire	
    vec3 reflectDir = normalize(reflect(-lightDir, normal)); //R
    vec3 viewDir = normalize(camPos-pos); //V
	
	//max(V . R, 0)^specPower
    float specAngle = max(dot(reflectDir, viewDir), 0.0);
    float specular = pow(specAngle, specPower);
	
	//lumi√®re ambiante et diffuse
	vec4 amb_diff = ambiant*lightcol+diffuse*lightcol;
	//vec4 amb_diff = ambiant+diffuse;

    vec4 res = amb_diff+specular;
    return  res;
}


void main()
{
	vec3 norml = normalize(phong_norm);
    vec3 light    = lightPos;
    vec4 lightcol = lightColor;
	vec4 phong = computePhong(light, lightcol, phong_pos, norml, cameraPosition, lightSpecPow, lightAmbiant, lightDiffuse);
    gl_FragColor = phong;
}
uniform vec4 lightAmbiant;
uniform vec4 lightDiffuse;
uniform float lightSpecPow;
uniform vec3 cameraPosition;
uniform vec4 lightColor;
uniform vec3 lightPos;

//in vec3 position;
//in vec3 normal;

vec4 computePhong(  vec3 light, vec4 lightcol, vec3 pos, vec3 norm, vec3 camPos, float specPower, vec4 ambiant, vec4 diffuse )
{
    vec3 normal = normalize(norm);

    //Diffuse
    vec3 lightDir = normalize(light - pos);
    float lambertian = max(dot(lightDir,normal), 0.0);
    float specular = 0.0;

    //Spec
    vec3 reflectDir = normalize(reflect(-lightDir, normal));
    vec3 viewDir = normalize(camPos-fpos);
    float specAngle = max(dot(reflectDir, viewDir), 0.0);
    specular = pow(specAngle, specPower);

    vec4 res = ambiant+lambertian*diffuse*lightcol+specular*lightcol;
    return  res;
}


void main()
{
    //vec3 light    = lightPos;
    //vec4 lightcol = lightColor;
    //vec3 norml = normalize(normal);
    //gl_FragColor = computePhong(light, lightcol, position, norml, cameraPosition, lightSpecPow, lightAmbiant, lightDiffuse);
    gl_FragColor = vec4(1.0);
}